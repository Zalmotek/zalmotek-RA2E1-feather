#include "hal_data.h"
#include "common_utils.h"
#include "SerialCompatibility.h"
#include "spi_max31723.h"

FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
FSP_CPP_FOOTER

void delay(int t);
void delay(int t) {
    R_BSP_SoftwareDelay(t, BSP_DELAY_UNITS_MILLISECONDS);
}

void print_float(float n);
void print_float(float n) {
    int p = 1;
    long long aux;
    if (n < 1) {
        Serial.print((uint8_t*)"0.");
        aux = ((int)(n * 10) % 10);
        Serial.print(aux);
        aux = (int)(n * 100) % 10;
        Serial.print(aux);
        return;
    }

    aux = n;
    Serial.print(aux);
    Serial.print((uint8_t*)".");
    aux = ((int)(n * 10) % 10);
    Serial.print(aux);
    aux = (int)(n * 100) % 10;
    Serial.print(aux);
}

/*******************************************************************************************************************//**
 * main() is generated by the RA Configuration editor and is used to generate threads if an RTOS is used.  This function
 * is called by main() when no RTOS is used.
 **********************************************************************************************************************/
void hal_entry(void)
{

    R_IOPORT_Open(&g_ioport_ctrl, &g_bsp_pin_cfg);
    R_BSP_PinAccessEnable();

    Serial.begin(115200);

    max31723_init();
    APP_PRINT("Sensor initialized.\n");
    Serial.print((uint8_t*) "Sensor initialized");

    while (true)
    {
        float temp = get_temperature();
        if ((int) temp == 0 || (int)temp == 255) {
            spiok = false;
        }

        Serial.print((uint8_t*) "Computation status [");
        Serial.print((uint8_t*) "\033[0;42mOK\033[0m");
        Serial.print((uint8_t*)"]");
        Serial.print((uint8_t*) ", ");

        Serial.print((uint8_t*) "SPI status [");
        if (spiok) {
            Serial.print((uint8_t*) "\033[0;42mOK\033[0m");
        }
        else {
            Serial.print((uint8_t*) "\033[0;41mNOK\033[0m");
        }
        Serial.print((uint8_t*)"]");
        Serial.print((uint8_t*) ", ");

        Serial.print((uint8_t*) "temperature [");
        if (spiok) {
            print_float(temp);
            Serial.print((uint8_t*) "Â°C");
        }
        Serial.print((uint8_t*)"]");
        Serial.print((uint8_t*) ", ");

        delay(1000);

        APP_PRINT("Measured temperature: %d.", (int)temp);
        APP_PRINT("%d\n", (int)(temp * 100) % 100);

    }

#if BSP_TZ_SECURE_BUILD
    /* Enter non-secure code */
    R_BSP_NonSecureEnter();
#endif
}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
#if BSP_FEATURE_FLASH_LP_VERSION != 0

        /* Enable reading from data flash. */
        R_FACI_LP->DFLCTL = 1U;

        /* Would normally have to wait tDSTOP(6us) for data flash recovery. Placing the enable here, before clock and
         * C runtime initialization, should negate the need for a delay since the initialization will typically take more than 6us. */
#endif
    }

    if (BSP_WARM_START_POST_C == event)
    {
        /* C runtime environment and system clocks are setup. */

        /* Configure pins. */
        R_IOPORT_Open (&IOPORT_CFG_CTRL, &IOPORT_CFG_NAME);

#if BSP_CFG_SDRAM_ENABLED

        /* Setup SDRAM and initialize it. Must configure pins first. */
        R_BSP_SdramInit(true);
#endif
    }
}

#if BSP_TZ_SECURE_BUILD

FSP_CPP_HEADER
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ();

/* Trustzone Secure Projects require at least one nonsecure callable function in order to build (Remove this if it is not required to build). */
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ()
{

}
FSP_CPP_FOOTER

#endif
